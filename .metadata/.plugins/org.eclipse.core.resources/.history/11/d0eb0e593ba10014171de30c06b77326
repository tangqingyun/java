package cn.blogs.dao;


import java.util.ArrayList;
import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public final class HibernateUtil {
	private static SessionFactory sessionFactory;

	private HibernateUtil() {
	}

	static {
		Configuration cfg = new Configuration();
		cfg.configure();
		sessionFactory = cfg.buildSessionFactory();
	}

	public static SessionFactory getSessionFactory() {
		return sessionFactory;
	}

	public static Session getSession() {
		return sessionFactory.openSession();
	}

	public static void add(Object entity) {
		Session s = null;
		Transaction tx = null;
		try {
			s = HibernateUtil.getSession();
			tx = s.beginTransaction();
			s.save(entity);
			tx.commit();
		} finally {
			if (s != null)
				s.close();
		}
	}

	public static void update(Object entity) {
		Session s = null;
		Transaction tx = null;
		try {
			s = HibernateUtil.getSession();
			tx = s.beginTransaction();
			s.update(entity);
			tx.commit();
		} finally {
			if (s != null)
				s.close();
		}
	}

	public static void delete(Object entity) {
		Session s = null;
		Transaction tx = null;
		try {
			s = HibernateUtil.getSession();
			tx = s.beginTransaction();
			s.delete(entity);
			tx.commit();
		} finally {
			if (s != null)
				s.close();
		}
	}

	/**
	 * 根据主键的id号 查询一条数据
	 * 
	 * @param c
	 * @param id
	 * @return
	 */
	public static Object getObjectByid(Class<?> c, int id) {
		Object model = null;
		Session s = null;
		try {
			s = getSession();
			model = s.get(c, id);
            return model;
		} finally {
			if (s != null)
				s.close();
		}
		return model;
	}

	@SuppressWarnings("unchecked")   
	public static <T> List<T> getList(String sql, String[] param) {
		List<T> list = new ArrayList<T>();
		Session session = null;
		try {
			session = getSession();
			Query query = session.createQuery(sql);
			if (param != null) {
				for (int i = 0; i < param.length; i++) {
					query.setString(i, param[i]);
				}
			}
			list = query.list();
		} catch (Exception e) {
		} finally {
			if (session != null) {
				session.close();
			}
		}
		return list;

	}

	public static Object getSingle(String sql, String[] param) {
		Object object = null;
		Session session = null;
		try {
			session = getSession();
			Query query = session.createQuery(sql);
			if (param != null) {
				for (int i = 0; i < param.length; i++) {
					query.setString(0, param[i]);
				}
				object = query.uniqueResult();
			}
		} catch (Exception e) {
		} finally {
			if (session != null) {
				session.close();
			}
		}
		return object;
	}

	
	/** 
	 * @param <T> 
	 * @param sql 
	 * @param param 
	 * @param page 
	 * @param size 
	 * @return 实现分页查询 
	 */ 
	@SuppressWarnings("unchecked")
	public static <T> List<T> getByPage(String sql,String[] param,int page,int size)  
	  {  
		List<T> list=new ArrayList<T>();  
	      Session session=null;  
	       try  
	        {  
	            session=getSession();  
	            Query query=session.createQuery(sql);  
	            if(param!=null)  
	            {  
	                for(int i=0;i<param.length;i++)  
	                {  
	                    query.setString(i,param[i]);      
	                }  
	            }  
	            //筛选条数  
	            query.setFirstResult((page-1)*size);  
	            query.setMaxResults(size);  
	            list=query.list();  
	        }  
	        catch (Exception e)  
	        {  
	        }  
	        finally  
	        {  
	            if(session!=null)  
	            {  
	                session.close();  
	            }  
	        }  
	      return list;  
	  }  
	/** 
	 * @param hql 
	 * @param pras 
	 * @return返回数据个数 
	 */  
	public static int getCount(String hql, String[] pras) {  
	    int resu = 0;  
	    Session s = null;  
	    try {  
	        s = getSession();  
	        Query q = s.createQuery(hql);  
	        if (pras != null) {  
	            for (int i = 0; i < pras.length; i++) {  
	                q.setString(i, pras[i]);  
	            }  
	        }  
	        resu = Integer.valueOf(q.iterate().next().toString());  
	    } catch (Exception e) {  
	        e.printStackTrace();  
	    } finally {  
	        if (s != null)  
	            s.close();  
	    }  
	    return resu;  
	}  
	
}
